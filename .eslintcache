[{"C:\\swe\\babylon-web-interview\\src\\index.js":"1","C:\\swe\\babylon-web-interview\\src\\App.js":"2","C:\\swe\\babylon-web-interview\\src\\config.js":"3"},{"size":266,"mtime":1639951313709,"results":"4","hashOfConfig":"5"},{"size":7478,"mtime":1640022130947,"results":"6","hashOfConfig":"5"},{"size":133,"mtime":1639951313709,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"v0uqu8",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\swe\\babylon-web-interview\\src\\index.js",[],["16","17"],"C:\\swe\\babylon-web-interview\\src\\App.js",["18","19"],"import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nimport logo from './logo.png';\r\nimport { API_ENDPOINT } from './config';\r\n\r\nimport './App.scss';\r\nimport { node } from 'prop-types';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {},\r\n      selectedConsultantType: 'gp',\r\n      availableSlots: [],\r\n      selectedDateTime: '',\r\n      selectedAppointmentType: '',\r\n      notes: '',\r\n    };\r\n    // this.handleSelectConsultantType = this.handleSelectConsultantType.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`${API_ENDPOINT}/availableSlots`)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({ availableSlots: json });\r\n      })\r\n      .catch(() => {\r\n        // TODO: Handle error here\r\n      });\r\n    fetch(`${API_ENDPOINT}/users/1`)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({ user: json });\r\n      })\r\n      .catch(() => {\r\n        // TODO: Handle error here\r\n      });\r\n  }\r\n\r\n  // second method to update selectedConsultantType\r\n  handleSelectConsultantType(e) {\r\n    this.setState({ selectedConsultantType: e.target.innerText.toLowerCase() });\r\n  }\r\n\r\n  async handleSubmit() {\r\n    try {\r\n      let response = await fetch(`${API_ENDPOINT}/appointments`, {\r\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        redirect: 'follow', // manual, *follow, error\r\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n        body: JSON.stringify({\r\n          notes: this.state.notes,\r\n          userId: this.state.user.id,\r\n          consultantType: this.state.selectedConsultantType + ' appointment',\r\n          appointmentType: this.state.selectedAppointmentType,\r\n          dateTime: this.state.selectedDateTime,\r\n        }), // body data type must match \"Content-Type\" header\r\n      });\r\n      console.log(`This is response`);\r\n      console.log(response);\r\n\r\n      this.setState({\r\n        selectedConsultantType: 'gp',\r\n        selectedDateTime: '',\r\n        selectedAppointmentType: '',\r\n        notes: '',\r\n      });\r\n    } catch (err) {}\r\n  }\r\n\r\n  render() {\r\n    // calculate matching slots\r\n    let slots = [];\r\n    for (let i = 0; i < this.state.availableSlots.length; i++) {\r\n      for (let j = 0; j < this.state.availableSlots[i]['consultantType'].length; j++) {\r\n        if (\r\n          this.state.availableSlots[i]['consultantType'][j] === this.state.selectedConsultantType\r\n        ) {\r\n          slots.push(this.state.availableSlots[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    let slotsByDate = {};\r\n    slots.forEach((slot) => {\r\n      if (slotsByDate[slot.time.slice(0, -14)]) {\r\n        slotsByDate[slot.time.slice(0, -14)].push(slot);\r\n      } else {\r\n        slotsByDate[slot.time.slice(0, -14)] = [];\r\n        slotsByDate[slot.time.slice(0, -14)].push(slot);\r\n      }\r\n    });\r\n\r\n    //dynamically display cosultant type buttons based on slots available\r\n    let consultantTypes = [];\r\n    this.state.availableSlots.forEach((slot) => {\r\n      slot.consultantType.forEach((consultantType) => {\r\n        if (!consultantTypes.includes(consultantType)) consultantTypes.push(consultantType);\r\n      });\r\n    });\r\n\r\n    //dynamically getting appointment types based on slots matched\r\n    let appointmentTypes = [];\r\n    this.state.availableSlots.forEach((slot) => {\r\n      slot.appointmentType.forEach((appointmentType) => {\r\n        if (!appointmentTypes.includes(appointmentType)) appointmentTypes.push(appointmentType);\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <div style={{ maxWidth: 600, margin: '24px auto' }}>\r\n          <div className=\"app-header\">\r\n            <img src={logo} className=\"app-logo\" alt=\"Babylon Health\" />\r\n          </div>\r\n          <h1>New Appointment</h1>\r\n          <div className=\"user\">\r\n            <img src={this.state.user.avatar} />\r\n            {this.state.user.firstName} {this.state.user.lastName}\r\n          </div>\r\n          <h3>Consultant Type</h3>\r\n          {consultantTypes.map((consultantType) => {\r\n            return (\r\n              <div\r\n                key={consultantType}\r\n                // could add selected className conditionally here based on this.state.selectedConsultantType but there's a delay because it has to wait for availableSlots to fetch, because buttons are dynamic\r\n                className={`button ${\r\n                  this.state.selectedConsultantType === consultantType && 'selected'\r\n                }`}\r\n                // className=\"button\"\r\n                // this is one method. another is binding function in constructor. another is putting setState directly in here.\r\n                onClick={(e) => this.handleSelectConsultantType(e)}\r\n              >\r\n                {consultantType}\r\n              </div>\r\n            );\r\n          })}\r\n\r\n          <div>\r\n            <h3>Date and Time</h3>\r\n            {Object.entries(slotsByDate).map(([date, slots]) => {\r\n              return (\r\n                <div key={date}>\r\n                  <div className=\"date\"> {moment(date).format('MMM D[:]')}</div>\r\n\r\n                  {slots.map(\r\n                    (slot, index) =>\r\n                      slot.time !== slots[index - 1]?.time && (\r\n                        <li\r\n                          key={slot.id}\r\n                          className={`button ${\r\n                            this.state.selectedDateTime === slot.time && 'selected'\r\n                          }`}\r\n                          onClick={() => {\r\n                            this.setState({ selectedDateTime: slot.time });\r\n                          }}\r\n                        >\r\n                          {moment(slot.time).format('hh:mm')}\r\n                        </li>\r\n                      ),\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div>\r\n            <h3>Appointment Type</h3>\r\n            {appointmentTypes.map((appointmentType) => (\r\n              <div\r\n                key={appointmentType}\r\n                className={`button ${\r\n                  this.state.selectedAppointmentType === appointmentType && 'selected'\r\n                }`}\r\n                onClick={(e) => this.setState({ selectedAppointmentType: appointmentType })}\r\n              >\r\n                {appointmentType}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            <h3>Notes</h3>\r\n            <textarea\r\n              placeholder=\"Describe your symptoms\"\r\n              value={this.state.notes}\r\n              onChange={(e) => this.setState({ notes: e.target.value })}\r\n            />\r\n          </div>\r\n          <div>\r\n            <div\r\n              className=\"button\"\r\n              onClick={() => {\r\n                this.handleSubmit();\r\n              }}\r\n            >\r\n              Book Consultant\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\swe\\babylon-web-interview\\src\\config.js",[],{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":8,"column":10,"nodeType":"26","messageId":"27","endLine":8,"endColumn":14},{"ruleId":"28","severity":1,"message":"29","line":128,"column":13,"nodeType":"30","endLine":128,"endColumn":49},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'node' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]
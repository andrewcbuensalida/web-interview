[{"C:\\swe\\babylon-web-interview\\client\\src\\index.js":"1","C:\\swe\\babylon-web-interview\\client\\src\\App.js":"2","C:\\swe\\babylon-web-interview\\client\\src\\config.js":"3"},{"size":266,"mtime":1640142804054,"results":"4","hashOfConfig":"5"},{"size":10065,"mtime":1640142804046,"results":"6","hashOfConfig":"5"},{"size":195,"mtime":1640142804051,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"15f58h8",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\swe\\babylon-web-interview\\client\\src\\index.js",[],["16","17"],"C:\\swe\\babylon-web-interview\\client\\src\\App.js",["18","19","20"],"import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\n\r\nimport logo from './logo.png';\r\nimport { API_ENDPOINT } from './config';\r\n\r\nimport './App.scss';\r\nimport { node } from 'prop-types';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {},\r\n      selectedConsultantType: 'gp',\r\n      availableSlots: [],\r\n      selectedDateTime: '',\r\n      selectedAppointmentType: '',\r\n      notes: '',\r\n      bookingSaved: false,\r\n    };\r\n    // this.handleSelectConsultantType = this.handleSelectConsultantType.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`${API_ENDPOINT}/availableSlots`)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({ availableSlots: json });\r\n      })\r\n      .catch(() => {\r\n        // TODO: Handle error here\r\n      });\r\n    fetch(`${API_ENDPOINT}/users/1`)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({ user: json });\r\n      })\r\n      .catch(() => {\r\n        // TODO: Handle error here\r\n      });\r\n  }\r\n\r\n  // second method to update selectedConsultantType\r\n  handleSelectConsultantType(e) {\r\n    this.setState({ selectedConsultantType: e.target.innerText.toLowerCase() });\r\n  }\r\n\r\n  async handleSubmit() {\r\n    let isError;\r\n    // could use this method, or have error states which conditionally change display of each error element\r\n    if (!this.state.user) {\r\n      isError = true;\r\n      document.getElementById('userError').style.display = 'inline';\r\n    }\r\n    if (!this.state.selectedConsultantType) {\r\n      isError = true;\r\n      document.getElementById('consultantError').style.display = 'inline';\r\n    }\r\n    if (!this.state.selectedDateTime) {\r\n      isError = true;\r\n      document.getElementById('dateTimeError').style.display = 'inline';\r\n    }\r\n    if (!this.state.selectedAppointmentType) {\r\n      isError = true;\r\n      document.getElementById('appointmentError').style.display = 'inline';\r\n    }\r\n    if (isError) {\r\n      document.getElementById('generalError').style.display = 'inline';\r\n      this.setState({bookingSaved:false})\r\n    }\r\n    if (!isError) {\r\n      try {\r\n        let responseJSON = await fetch(`${API_ENDPOINT}/appointments`, {\r\n          method: 'POST', // *GET, POST, PUT, DELETE,\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          cache: 'no-cache',\r\n          credentials: 'same-origin',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          redirect: 'follow',\r\n          referrerPolicy: 'no-referrer',\r\n          body: JSON.stringify({\r\n            notes: this.state.notes,\r\n            userId: this.state.user.id,\r\n            consultantType: this.state.selectedConsultantType + ' appointment',\r\n            appointmentType: this.state.selectedAppointmentType,\r\n            dateTime: this.state.selectedDateTime,\r\n          }), // body data type must match \"Content-Type\" header\r\n        });\r\n        let response = await responseJSON.json();\r\n\r\n        this.setState({\r\n          selectedConsultantType: 'gp',\r\n          selectedDateTime: '',\r\n          selectedAppointmentType: '',\r\n          notes: '',\r\n          bookingSaved: true,\r\n        });\r\n\r\n        document.getElementById('generalError').style.display = 'none';\r\n        document.getElementById('userError').style.display = 'none';\r\n        document.getElementById('consultantError').style.display = 'none';\r\n        document.getElementById('dateTimeError').style.display = 'none';\r\n        document.getElementById('appointmentError').style.display = 'none';\r\n      } catch (err) {\r\n        console.log(`This is err`);\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // calculate matching slots\r\n    let slots = [];\r\n    for (let i = 0; i < this.state.availableSlots.length; i++) {\r\n      for (let j = 0; j < this.state.availableSlots[i]['consultantType'].length; j++) {\r\n        if (\r\n          this.state.availableSlots[i]['consultantType'][j] === this.state.selectedConsultantType\r\n        ) {\r\n          slots.push(this.state.availableSlots[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    let slotsByDate = {};\r\n    slots.forEach((slot) => {\r\n      if (slotsByDate[slot.time.slice(0, -14)]) {\r\n        slotsByDate[slot.time.slice(0, -14)].push(slot);\r\n      } else {\r\n        slotsByDate[slot.time.slice(0, -14)] = [];\r\n        slotsByDate[slot.time.slice(0, -14)].push(slot);\r\n      }\r\n    });\r\n\r\n    //dynamically display cosultant type buttons based on slots available\r\n    let consultantTypes = [];\r\n    this.state.availableSlots.forEach((slot) => {\r\n      slot.consultantType.forEach((consultantType) => {\r\n        if (!consultantTypes.includes(consultantType)) consultantTypes.push(consultantType);\r\n      });\r\n    });\r\n\r\n    //dynamically getting appointment types based on slots matched. probably should be based on dateTime selected\r\n    let appointmentTypes = [];\r\n    this.state.availableSlots.forEach((slot) => {\r\n      slot.appointmentType.forEach((appointmentType) => {\r\n        if (!appointmentTypes.includes(appointmentType)) appointmentTypes.push(appointmentType);\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <div style={{ maxWidth: 600, margin: '24px auto', padding: '0 1em' }}>\r\n          <div className=\"app-header\">\r\n            <img src={logo} className=\"app-logo\" alt=\"Babylon Health\" />\r\n          </div>\r\n          <h1>New Appointment</h1>\r\n          <div className=\"user\">\r\n            <img src={this.state.user.avatar} />\r\n            {this.state.user.firstName} {this.state.user.lastName}\r\n            <span id=\"userError\">Please Log In</span>\r\n          </div>\r\n          <div className=\"fadeContainer\">\r\n            <h3>\r\n              <i className=\"fas fa-stethoscope fa-lg\"></i>\r\n              Consultant Type <span id=\"consultantError\">Please select a consultant type</span>\r\n            </h3>\r\n            <div className=\"fade\"></div>\r\n\r\n            <ScrollContainer className=\"optionsContainer\">\r\n              {consultantTypes.map((consultantType) => {\r\n                return (\r\n                  <div\r\n                    key={consultantType}\r\n                    className={`button ${\r\n                      this.state.selectedConsultantType === consultantType && 'selected'\r\n                    }`}\r\n                    onClick={(e) => this.handleSelectConsultantType(e)}\r\n                    tabIndex=\"0\"\r\n                  >\r\n                    {consultantType === 'gp'\r\n                      ? 'GP'\r\n                      : consultantType.charAt(0).toUpperCase() + consultantType.slice(1)}\r\n                  </div>\r\n                );\r\n              })}\r\n            </ScrollContainer>\r\n          </div>\r\n\r\n          <div>\r\n            <h3>\r\n              <span>\r\n                <i className=\"far fa-clock fa-lg\"></i>\r\n              </span>\r\n              Date and Time <span id=\"dateTimeError\">Please select a time slot</span>\r\n            </h3>\r\n            {Object.entries(slotsByDate).map(([date, slots]) => {\r\n              return (\r\n                <div key={date} className=\"fadeContainer\">\r\n                  <div className=\"date\"> {moment(date).format('MMM D[:]')}</div>\r\n                  <div className=\"fade\"></div>\r\n\r\n                  <ScrollContainer className=\"optionsContainer\">\r\n                    {slots.map(\r\n                      (slot, index) =>\r\n                        slot.time !== slots[index - 1]?.time && (\r\n                          <li\r\n                            key={slot.id}\r\n                            className={`button ${\r\n                              this.state.selectedDateTime === slot.time && 'selected'\r\n                            }`}\r\n                            onClick={() => {\r\n                              this.setState({ selectedDateTime: slot.time });\r\n                            }}\r\n                          >\r\n                            {moment(slot.time).format('hh:mm a')}\r\n                          </li>\r\n                        ),\r\n                    )}\r\n                  </ScrollContainer>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"fadeContainer\">\r\n            <h3>\r\n              <span>\r\n                <i className=\"fas fa-video fa-lg\"></i>\r\n              </span>\r\n              Appointment Type <span id=\"appointmentError\">Please select an appointment type</span>\r\n            </h3>{' '}\r\n            <div className=\"fade\"></div>\r\n            <ScrollContainer className=\"optionsContainer\">\r\n              {appointmentTypes.map((appointmentType) => (\r\n                <div\r\n                  key={appointmentType}\r\n                  className={`button ${\r\n                    this.state.selectedAppointmentType === appointmentType && 'selected'\r\n                  }`}\r\n                  onClick={(e) => this.setState({ selectedAppointmentType: appointmentType })}\r\n                >\r\n                  {appointmentType.charAt(0).toUpperCase() + appointmentType.slice(1)}\r\n                </div>\r\n              ))}{' '}\r\n            </ScrollContainer>\r\n          </div>\r\n          <div>\r\n            <h3>\r\n              <span>\r\n                <i className=\"fas fa-pencil-alt fa-lg\"></i>\r\n              </span>\r\n              Notes\r\n            </h3>\r\n            <textarea\r\n              placeholder=\"Describe your symptoms\"\r\n              value={this.state.notes}\r\n              onChange={(e) => this.setState({ notes: e.target.value })}\r\n            />\r\n          </div>\r\n          <div>\r\n            <div\r\n              className=\"button book\"\r\n              onClick={() => {\r\n                this.handleSubmit();\r\n              }}\r\n            >\r\n              Book\r\n            </div>\r\n            <span id=\"generalError\">Please fill missing information</span>\r\n            {this.state.bookingSaved && <span id=\"savedMessage\">Booking saved!</span>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\swe\\babylon-web-interview\\client\\src\\config.js",[],{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":9,"column":10,"nodeType":"27","messageId":"28","endLine":9,"endColumn":14},{"ruleId":"25","severity":1,"message":"29","line":93,"column":13,"nodeType":"27","messageId":"28","endLine":93,"endColumn":21},{"ruleId":"30","severity":1,"message":"31","line":162,"column":13,"nodeType":"32","endLine":162,"endColumn":49},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'node' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]
[{"C:\\swe\\babylon-web-interview\\client\\src\\index.js":"1","C:\\swe\\babylon-web-interview\\client\\src\\config.js":"2","C:\\swe\\babylon-web-interview\\client\\src\\routes\\ScheduledAppointments.js":"3","C:\\swe\\babylon-web-interview\\client\\src\\routes\\CreateAppointment.js":"4","C:\\swe\\babylon-web-interview\\client\\src\\App.js":"5","C:\\swe\\babylon-web-interview\\client\\src\\components\\Nav.js":"6"},{"size":334,"mtime":1640203479629,"results":"7","hashOfConfig":"8"},{"size":195,"mtime":1640142804051,"results":"9","hashOfConfig":"8"},{"size":205,"mtime":1640203122631,"results":"10","hashOfConfig":"8"},{"size":9577,"mtime":1640204606552,"results":"11","hashOfConfig":"8"},{"size":678,"mtime":1640205110155,"results":"12","hashOfConfig":"8"},{"size":635,"mtime":1640204905164,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15f58h8",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\swe\\babylon-web-interview\\client\\src\\index.js",[],"C:\\swe\\babylon-web-interview\\client\\src\\config.js",[],["28","29"],"C:\\swe\\babylon-web-interview\\client\\src\\routes\\ScheduledAppointments.js",[],"C:\\swe\\babylon-web-interview\\client\\src\\routes\\CreateAppointment.js",["30","31"],"import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\n\r\nimport { API_ENDPOINT } from '../config';\r\nimport './CreateAppointment.scss';\r\n\r\nclass CreateAppointment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {},\r\n      selectedConsultantType: 'gp',\r\n      availableSlots: [],\r\n      selectedDateTime: '',\r\n      selectedAppointmentType: '',\r\n      notes: '',\r\n      bookingSaved: false,\r\n    };\r\n    // this.handleSelectConsultantType = this.handleSelectConsultantType.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`${API_ENDPOINT}/availableSlots`)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({ availableSlots: json });\r\n      })\r\n      .catch(() => {\r\n        // TODO: Handle error here\r\n      });\r\n    fetch(`${API_ENDPOINT}/users/1`)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({ user: json });\r\n      })\r\n      .catch(() => {\r\n        // TODO: Handle error here\r\n      });\r\n  }\r\n\r\n  // second method to update selectedConsultantType\r\n  handleSelectConsultantType(e) {\r\n    this.setState({ selectedConsultantType: e.target.innerText.toLowerCase() });\r\n  }\r\n\r\n  async handleSubmit() {\r\n    let isError;\r\n    // could use this method, or have error states which conditionally change display of each error element\r\n    if (!this.state.user) {\r\n      isError = true;\r\n      document.getElementById('userError').style.display = 'inline';\r\n    }\r\n    if (!this.state.selectedConsultantType) {\r\n      isError = true;\r\n      document.getElementById('consultantError').style.display = 'inline';\r\n    }\r\n    if (!this.state.selectedDateTime) {\r\n      isError = true;\r\n      document.getElementById('dateTimeError').style.display = 'inline';\r\n    }\r\n    if (!this.state.selectedAppointmentType) {\r\n      isError = true;\r\n      document.getElementById('appointmentError').style.display = 'inline';\r\n    }\r\n    if (isError) {\r\n      document.getElementById('generalError').style.display = 'inline';\r\n      this.setState({ bookingSaved: false });\r\n    }\r\n    if (!isError) {\r\n      try {\r\n        let responseJSON = await fetch(`${API_ENDPOINT}/appointments`, {\r\n          method: 'POST', // *GET, POST, PUT, DELETE,\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          cache: 'no-cache',\r\n          credentials: 'same-origin',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          redirect: 'follow',\r\n          referrerPolicy: 'no-referrer',\r\n          body: JSON.stringify({\r\n            notes: this.state.notes,\r\n            userId: this.state.user.id,\r\n            consultantType: this.state.selectedConsultantType + ' appointment',\r\n            appointmentType: this.state.selectedAppointmentType,\r\n            dateTime: this.state.selectedDateTime,\r\n          }), // body data type must match \"Content-Type\" header\r\n        });\r\n        let response = await responseJSON.json();\r\n\r\n        this.setState({\r\n          selectedConsultantType: 'gp',\r\n          selectedDateTime: '',\r\n          selectedAppointmentType: '',\r\n          notes: '',\r\n          bookingSaved: true,\r\n        });\r\n\r\n        document.getElementById('generalError').style.display = 'none';\r\n        document.getElementById('userError').style.display = 'none';\r\n        document.getElementById('consultantError').style.display = 'none';\r\n        document.getElementById('dateTimeError').style.display = 'none';\r\n        document.getElementById('appointmentError').style.display = 'none';\r\n      } catch (err) {\r\n        console.log(`This is err`);\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // calculate matching slots\r\n    let slots = [];\r\n    for (let i = 0; i < this.state.availableSlots.length; i++) {\r\n      for (let j = 0; j < this.state.availableSlots[i]['consultantType'].length; j++) {\r\n        if (\r\n          this.state.availableSlots[i]['consultantType'][j] === this.state.selectedConsultantType\r\n        ) {\r\n          slots.push(this.state.availableSlots[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    let slotsByDate = {};\r\n    slots.forEach((slot) => {\r\n      if (slotsByDate[slot.time.slice(0, -14)]) {\r\n        slotsByDate[slot.time.slice(0, -14)].push(slot);\r\n      } else {\r\n        slotsByDate[slot.time.slice(0, -14)] = [];\r\n        slotsByDate[slot.time.slice(0, -14)].push(slot);\r\n      }\r\n    });\r\n\r\n    //dynamically display cosultant type buttons based on slots available\r\n    let consultantTypes = [];\r\n    this.state.availableSlots.forEach((slot) => {\r\n      slot.consultantType.forEach((consultantType) => {\r\n        if (!consultantTypes.includes(consultantType)) consultantTypes.push(consultantType);\r\n      });\r\n    });\r\n\r\n    //dynamically getting appointment types based on slots matched. probably should be based on dateTime selected\r\n    let appointmentTypes = [];\r\n    this.state.availableSlots.forEach((slot) => {\r\n      slot.appointmentType.forEach((appointmentType) => {\r\n        if (!appointmentTypes.includes(appointmentType)) appointmentTypes.push(appointmentType);\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h1>Create Appointment</h1>\r\n        <div className=\"user\">\r\n          <img src={this.state.user.avatar} />\r\n          {this.state.user.firstName} {this.state.user.lastName}\r\n          <span id=\"userError\">Please Log In</span>\r\n        </div>\r\n        <div className=\"fadeContainer\">\r\n          <h3>\r\n            <i className=\"fas fa-stethoscope fa-lg\"></i>\r\n            Consultant Type <span id=\"consultantError\">Please select a consultant type</span>\r\n          </h3>\r\n          <div className=\"fade\"></div>\r\n\r\n          <ScrollContainer className=\"optionsContainer\">\r\n            {consultantTypes.map((consultantType) => {\r\n              return (\r\n                <div\r\n                  key={consultantType}\r\n                  className={`button ${\r\n                    this.state.selectedConsultantType === consultantType && 'selected'\r\n                  }`}\r\n                  onClick={(e) => this.handleSelectConsultantType(e)}\r\n                  tabIndex=\"0\"\r\n                >\r\n                  {consultantType === 'gp'\r\n                    ? 'GP'\r\n                    : consultantType.charAt(0).toUpperCase() + consultantType.slice(1)}\r\n                </div>\r\n              );\r\n            })}\r\n          </ScrollContainer>\r\n        </div>\r\n\r\n        <div>\r\n          <h3>\r\n            <span>\r\n              <i className=\"far fa-clock fa-lg\"></i>\r\n            </span>\r\n            Date and Time <span id=\"dateTimeError\">Please select a time slot</span>\r\n          </h3>\r\n          {Object.entries(slotsByDate).map(([date, slots]) => {\r\n            return (\r\n              <div key={date} className=\"fadeContainer\">\r\n                <div className=\"date\"> {moment(date).format('MMM D[:]')}</div>\r\n                <div className=\"fade\"></div>\r\n\r\n                <ScrollContainer className=\"optionsContainer\">\r\n                  {slots.map(\r\n                    (slot, index) =>\r\n                      slot.time !== slots[index - 1]?.time && (\r\n                        <li\r\n                          key={slot.id}\r\n                          className={`button ${\r\n                            this.state.selectedDateTime === slot.time && 'selected'\r\n                          }`}\r\n                          onClick={() => {\r\n                            this.setState({ selectedDateTime: slot.time });\r\n                          }}\r\n                        >\r\n                          {moment(slot.time).format('hh:mm a')}\r\n                        </li>\r\n                      ),\r\n                  )}\r\n                </ScrollContainer>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"fadeContainer\">\r\n          <h3>\r\n            <span>\r\n              <i className=\"fas fa-video fa-lg\"></i>\r\n            </span>\r\n            Appointment Type <span id=\"appointmentError\">Please select an appointment type</span>\r\n          </h3>{' '}\r\n          <div className=\"fade\"></div>\r\n          <ScrollContainer className=\"optionsContainer\">\r\n            {appointmentTypes.map((appointmentType) => (\r\n              <div\r\n                key={appointmentType}\r\n                className={`button ${\r\n                  this.state.selectedAppointmentType === appointmentType && 'selected'\r\n                }`}\r\n                onClick={(e) => this.setState({ selectedAppointmentType: appointmentType })}\r\n              >\r\n                {appointmentType.charAt(0).toUpperCase() + appointmentType.slice(1)}\r\n              </div>\r\n            ))}{' '}\r\n          </ScrollContainer>\r\n        </div>\r\n        <div>\r\n          <h3>\r\n            <span>\r\n              <i className=\"fas fa-pencil-alt fa-lg\"></i>\r\n            </span>\r\n            Notes\r\n          </h3>\r\n          <textarea\r\n            placeholder=\"Describe your symptoms\"\r\n            value={this.state.notes}\r\n            onChange={(e) => this.setState({ notes: e.target.value })}\r\n          />\r\n        </div>\r\n        <div>\r\n          <div\r\n            className=\"button book\"\r\n            onClick={() => {\r\n              this.handleSubmit();\r\n            }}\r\n          >\r\n            Book\r\n          </div>\r\n          <span id=\"generalError\">Please fill missing information</span>\r\n          {this.state.bookingSaved && <span id=\"savedMessage\">Booking saved!</span>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateAppointment;\r\n","C:\\swe\\babylon-web-interview\\client\\src\\App.js",[],"C:\\swe\\babylon-web-interview\\client\\src\\components\\Nav.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":90,"column":13,"nodeType":"38","messageId":"39","endLine":90,"endColumn":21},{"ruleId":"40","severity":1,"message":"41","line":155,"column":11,"nodeType":"42","endLine":155,"endColumn":47},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]
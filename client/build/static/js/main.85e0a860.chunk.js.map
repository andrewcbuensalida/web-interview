{"version":3,"sources":["logo.png","config.js","App.js","registerServiceWorker.js","index.js"],"names":["API_ENDPOINT","App","props","state","user","selectedConsultantType","availableSlots","selectedDateTime","selectedAppointmentType","notes","bookingSaved","fetch","then","res","json","setState","catch","e","this","target","innerText","toLowerCase","isError","document","getElementById","style","display","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","userId","id","consultantType","appointmentType","dateTime","responseJSON","console","log","slots","i","length","j","push","slotsByDate","forEach","slot","time","slice","consultantTypes","includes","appointmentTypes","className","maxWidth","margin","padding","src","logo","alt","avatar","firstName","lastName","map","onClick","handleSelectConsultantType","tabIndex","charAt","toUpperCase","Object","entries","date","moment","format","index","placeholder","value","onChange","handleSubmit","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.85e0a860.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.1583679e.png\";","const API_ENDPOINT =\r\n  process.env.NODE_ENV === 'production' ? '/api/v1' : 'http://localhost:3400/api/v1';\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport { API_ENDPOINT };\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\n\r\nimport logo from './logo.png';\r\nimport { API_ENDPOINT } from './config';\r\n\r\nimport './App.scss';\r\nimport { node } from 'prop-types';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {},\r\n      selectedConsultantType: 'gp',\r\n      availableSlots: [],\r\n      selectedDateTime: '',\r\n      selectedAppointmentType: '',\r\n      notes: '',\r\n      bookingSaved: false,\r\n    };\r\n    // this.handleSelectConsultantType = this.handleSelectConsultantType.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`${API_ENDPOINT}/availableSlots`)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({ availableSlots: json });\r\n      })\r\n      .catch(() => {\r\n        // TODO: Handle error here\r\n      });\r\n    fetch(`${API_ENDPOINT}/users/1`)\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({ user: json });\r\n      })\r\n      .catch(() => {\r\n        // TODO: Handle error here\r\n      });\r\n  }\r\n\r\n  // second method to update selectedConsultantType\r\n  handleSelectConsultantType(e) {\r\n    this.setState({ selectedConsultantType: e.target.innerText.toLowerCase() });\r\n  }\r\n\r\n  async handleSubmit() {\r\n    let isError;\r\n    // could use this method, or have error states which conditionally change display of each error element\r\n    if (!this.state.user) {\r\n      isError = true;\r\n      document.getElementById('userError').style.display = 'inline';\r\n    }\r\n    if (!this.state.selectedConsultantType) {\r\n      isError = true;\r\n      document.getElementById('consultantError').style.display = 'inline';\r\n    }\r\n    if (!this.state.selectedDateTime) {\r\n      isError = true;\r\n      document.getElementById('dateTimeError').style.display = 'inline';\r\n    }\r\n    if (!this.state.selectedAppointmentType) {\r\n      isError = true;\r\n      document.getElementById('appointmentError').style.display = 'inline';\r\n    }\r\n    if (isError) {\r\n      document.getElementById('generalError').style.display = 'inline';\r\n      this.setState({bookingSaved:false})\r\n    }\r\n    if (!isError) {\r\n      try {\r\n        let responseJSON = await fetch(`${API_ENDPOINT}/appointments`, {\r\n          method: 'POST', // *GET, POST, PUT, DELETE,\r\n          mode: 'cors', // no-cors, *cors, same-origin\r\n          cache: 'no-cache',\r\n          credentials: 'same-origin',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          redirect: 'follow',\r\n          referrerPolicy: 'no-referrer',\r\n          body: JSON.stringify({\r\n            notes: this.state.notes,\r\n            userId: this.state.user.id,\r\n            consultantType: this.state.selectedConsultantType + ' appointment',\r\n            appointmentType: this.state.selectedAppointmentType,\r\n            dateTime: this.state.selectedDateTime,\r\n          }), // body data type must match \"Content-Type\" header\r\n        });\r\n        let response = await responseJSON.json();\r\n\r\n        this.setState({\r\n          selectedConsultantType: 'gp',\r\n          selectedDateTime: '',\r\n          selectedAppointmentType: '',\r\n          notes: '',\r\n          bookingSaved: true,\r\n        });\r\n\r\n        document.getElementById('generalError').style.display = 'none';\r\n        document.getElementById('userError').style.display = 'none';\r\n        document.getElementById('consultantError').style.display = 'none';\r\n        document.getElementById('dateTimeError').style.display = 'none';\r\n        document.getElementById('appointmentError').style.display = 'none';\r\n      } catch (err) {\r\n        console.log(`This is err`);\r\n        console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // calculate matching slots\r\n    let slots = [];\r\n    for (let i = 0; i < this.state.availableSlots.length; i++) {\r\n      for (let j = 0; j < this.state.availableSlots[i]['consultantType'].length; j++) {\r\n        if (\r\n          this.state.availableSlots[i]['consultantType'][j] === this.state.selectedConsultantType\r\n        ) {\r\n          slots.push(this.state.availableSlots[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    let slotsByDate = {};\r\n    slots.forEach((slot) => {\r\n      if (slotsByDate[slot.time.slice(0, -14)]) {\r\n        slotsByDate[slot.time.slice(0, -14)].push(slot);\r\n      } else {\r\n        slotsByDate[slot.time.slice(0, -14)] = [];\r\n        slotsByDate[slot.time.slice(0, -14)].push(slot);\r\n      }\r\n    });\r\n\r\n    //dynamically display cosultant type buttons based on slots available\r\n    let consultantTypes = [];\r\n    this.state.availableSlots.forEach((slot) => {\r\n      slot.consultantType.forEach((consultantType) => {\r\n        if (!consultantTypes.includes(consultantType)) consultantTypes.push(consultantType);\r\n      });\r\n    });\r\n\r\n    //dynamically getting appointment types based on slots matched. probably should be based on dateTime selected\r\n    let appointmentTypes = [];\r\n    this.state.availableSlots.forEach((slot) => {\r\n      slot.appointmentType.forEach((appointmentType) => {\r\n        if (!appointmentTypes.includes(appointmentType)) appointmentTypes.push(appointmentType);\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <div style={{ maxWidth: 600, margin: '24px auto', padding: '0 1em' }}>\r\n          <div className=\"app-header\">\r\n            <img src={logo} className=\"app-logo\" alt=\"Babylon Health\" />\r\n          </div>\r\n          <h1>New Appointment</h1>\r\n          <div className=\"user\">\r\n            <img src={this.state.user.avatar} />\r\n            {this.state.user.firstName} {this.state.user.lastName}\r\n            <span id=\"userError\">Please Log In</span>\r\n          </div>\r\n          <div className=\"fadeContainer\">\r\n            <h3>\r\n              <i className=\"fas fa-stethoscope fa-lg\"></i>\r\n              Consultant Type <span id=\"consultantError\">Please select a consultant type</span>\r\n            </h3>\r\n            <div className=\"fade\"></div>\r\n\r\n            <ScrollContainer className=\"optionsContainer\">\r\n              {consultantTypes.map((consultantType) => {\r\n                return (\r\n                  <div\r\n                    key={consultantType}\r\n                    className={`button ${\r\n                      this.state.selectedConsultantType === consultantType && 'selected'\r\n                    }`}\r\n                    onClick={(e) => this.handleSelectConsultantType(e)}\r\n                    tabIndex=\"0\"\r\n                  >\r\n                    {consultantType === 'gp'\r\n                      ? 'GP'\r\n                      : consultantType.charAt(0).toUpperCase() + consultantType.slice(1)}\r\n                  </div>\r\n                );\r\n              })}\r\n            </ScrollContainer>\r\n          </div>\r\n\r\n          <div>\r\n            <h3>\r\n              <span>\r\n                <i className=\"far fa-clock fa-lg\"></i>\r\n              </span>\r\n              Date and Time <span id=\"dateTimeError\">Please select a time slot</span>\r\n            </h3>\r\n            {Object.entries(slotsByDate).map(([date, slots]) => {\r\n              return (\r\n                <div key={date} className=\"fadeContainer\">\r\n                  <div className=\"date\"> {moment(date).format('MMM D[:]')}</div>\r\n                  <div className=\"fade\"></div>\r\n\r\n                  <ScrollContainer className=\"optionsContainer\">\r\n                    {slots.map(\r\n                      (slot, index) =>\r\n                        slot.time !== slots[index - 1]?.time && (\r\n                          <li\r\n                            key={slot.id}\r\n                            className={`button ${\r\n                              this.state.selectedDateTime === slot.time && 'selected'\r\n                            }`}\r\n                            onClick={() => {\r\n                              this.setState({ selectedDateTime: slot.time });\r\n                            }}\r\n                          >\r\n                            {moment(slot.time).format('hh:mm a')}\r\n                          </li>\r\n                        ),\r\n                    )}\r\n                  </ScrollContainer>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"fadeContainer\">\r\n            <h3>\r\n              <span>\r\n                <i className=\"fas fa-video fa-lg\"></i>\r\n              </span>\r\n              Appointment Type <span id=\"appointmentError\">Please select an appointment type</span>\r\n            </h3>{' '}\r\n            <div className=\"fade\"></div>\r\n            <ScrollContainer className=\"optionsContainer\">\r\n              {appointmentTypes.map((appointmentType) => (\r\n                <div\r\n                  key={appointmentType}\r\n                  className={`button ${\r\n                    this.state.selectedAppointmentType === appointmentType && 'selected'\r\n                  }`}\r\n                  onClick={(e) => this.setState({ selectedAppointmentType: appointmentType })}\r\n                >\r\n                  {appointmentType.charAt(0).toUpperCase() + appointmentType.slice(1)}\r\n                </div>\r\n              ))}{' '}\r\n            </ScrollContainer>\r\n          </div>\r\n          <div>\r\n            <h3>\r\n              <span>\r\n                <i className=\"fas fa-pencil-alt fa-lg\"></i>\r\n              </span>\r\n              Notes\r\n            </h3>\r\n            <textarea\r\n              placeholder=\"Describe your symptoms\"\r\n              value={this.state.notes}\r\n              onChange={(e) => this.setState({ notes: e.target.value })}\r\n            />\r\n          </div>\r\n          <div>\r\n            <div\r\n              className=\"button book\"\r\n              onClick={() => {\r\n                this.handleSubmit();\r\n              }}\r\n            >\r\n              Book\r\n            </div>\r\n            <span id=\"generalError\">Please fill missing information</span>\r\n            {this.state.bookingSaved && <span id=\"savedMessage\">Booking saved!</span>}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'normalize.css';\r\n\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}